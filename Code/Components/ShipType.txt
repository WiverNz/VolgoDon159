
namespace Schematyc
{

struct SShipTypeParams
{
	inline SShipTypeParams(const CryGUID& _guid, IObject& _object)
		: guid(_guid)
		, object(_object)
	{}

	const CryGUID& guid;
	IObject& object;
	IEntityComponent* pComponent = nullptr;
};

class CShipType
{
public:

	virtual bool Init()
	{
		return true;
	}

	virtual void Start() {}
	virtual void Stop() {}
	virtual void Shutdown() {}

	inline void  PreInit(const SShipTypeParams& params)
	{
		m_guid = params.guid;
		m_pObject = &params.object;
		m_pComponent = params.pComponent;
	}

	template<typename SIGNAL> inline void OutputSignal(const SIGNAL& signal)
	{
		GetObject().ProcessSignal(signal, m_guid);
	}

	inline const CryGUID& GetGUID() const
	{
		return m_guid;
	}

	inline IObject& GetObject() const
	{
		SCHEMATYC_CORE_ASSERT(m_pObject);
		return *m_pObject;
	}

	inline IEntityComponent* GetComponent() const
	{
		return m_pComponent;
	}

	bool operator==(const CShipType& rOther) const
	{
		return m_guid == rOther.m_guid;
	}

private:

	CryGUID       m_guid;
	IObject* m_pObject = nullptr;
	IEntityComponent* m_pComponent = nullptr;
};

DECLARE_SHARED_POINTERS(CShipType)

enum class EShipTypeFlags
{
	None = 0,
	Singleton = BIT(0), // Allow only of one instance of this action to run at a time per object.
	ServerOnly = BIT(1), // Action should only be active on server.
	ClientOnly = BIT(2), // Action should only be active on clients.
	NetworkReplicateServer = BIT(3), // Action should be replicated on server.
	NetworkReplicateClients = BIT(4)  // Action should be replicated on clients.
};

typedef CEnumFlags<EShipTypeFlags> ShipTypeFlags;

class CShipTypeDesc : public CCustomClassDesc
{
public:

	inline void SetIcon(const char* szIcon)
	{
		m_icon = szIcon;
	}

	inline const char* GetIcon() const
	{
		return m_icon.c_str();
	}

	inline void SetActionFlags(const ShipTypeFlags& flags)
	{
		m_flags = flags;
	}

	inline ShipTypeFlags GetActionFlags() const
	{
		return m_flags;
	}

	inline void AddConstant(const char* szName, const char* szLabel)
	{
		
	}

private:

	string      m_icon;
	ShipTypeFlags m_flags;
};

SCHEMATYC_DECLARE_CUSTOM_CLASS_DESC(CShipType, CShipTypeDesc, CClassDescInterface)

static void ReflectType(Schematyc::CTypeDesc<CShipType>& desc)
{
	desc.SetGUID("{968E03B0-E0D4-4C91-A6DB-B7D44361B833}"_cry_guid);
	desc.SetLabel("Ship Type");
	desc.SetDescription("This is a ship type!");
	desc.SetDefaultValue(CShipType());
	desc.AddConstant("Ship1", "volgodon");
}

} // Schematyc